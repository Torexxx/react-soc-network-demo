{"version":3,"sources":["components/hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsWithRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusWithHooks","useState","status","setStatus","editMode","setEditMode","useEffect","value","autoFocus","onBlur","updateStatus","onChange","e","target","onDoubleClick","isOwner","ProfileData","profile","goToEditMode","onClick","className","s","editField","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","contactTitle","contactValue","ProfileDataReduxForm","reduxForm","form","enableReinitialize","handleSubmit","error","profileInfoWrapper","onSubmit","commonErrorText","fieldCreator","Input","undefined","required","name","component","type","TextArea","Field","Contacts","ProfileInfo","savePhoto","saveProfile","profileUpdateStatus","avatar","alt","src","photos","large","files","length","wallpaper","initialValues","formData","Preloader","Post","likesCount","message","item","maxLength15","maxLength","AddPostsReduxForm","placeholder","validate","number","MyPosts","posts","addPost","resetField","postsElements","reverse","p","id","myPostsWrapper","values","newPostText","profilePage","dispatch","addPostAC","reset","Profile","MyPostsContainer","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","updateProfilePhoto","prevProps","prevState","snapshot","withRouter"],"mappings":"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","file":"static/js/3.d4ed59b5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst mapStateToPropsWithRedirect = (state: any) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component: any) => {\r\n\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n            return (\r\n                <Component {...this.props} />\r\n            );\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsWithRedirect)(RedirectComponent);\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoWrapper\":\"ProfileInfo_profileInfoWrapper__3k25Y\",\"wallpaper\":\"ProfileInfo_wallpaper__6Z2U_\",\"avatar\":\"ProfileInfo_avatar__2FxJL\",\"contacts\":\"ProfileInfo_contacts__1K4U9\",\"editField\":\"ProfileInfo_editField__2Okej\",\"commonErrorText\":\"ProfileInfo_commonErrorText__ibHYE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1FGlE\"};","import React, {useEffect, useState} from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props: {status: string | number, updateStatus(status: string | number): void , isOwner: boolean}) => {\r\n    let [status, setStatus] = useState(props.status);\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        if (props.isOwner) {\r\n            setEditMode(true);\r\n        }\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusEditHandler = (e: any) => {\r\n        setStatus(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div><b>Статус:</b>\r\n            {\r\n                !editMode\r\n                    ? <span  onDoubleClick={activateEditMode}>{props.status || 'no status'}</span>\r\n                    : <div>\r\n                        <input value = {status} autoFocus={true} onBlur={deactivateEditMode} onChange={onStatusEditHandler} />\r\n                    </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import s from \"./ProfileInfo.module.css\";\r\nimport React from \"react\";\r\nimport {Contacts} from \"./ProfileInfo\";\r\n\r\nconst ProfileData = ({profile, goToEditMode} : any) => {\r\n\r\n    return (\r\n        <>\r\n            <button onClick={goToEditMode}>Edit</button>\r\n            <div className={s.editField}>\r\n                <b>Full Name: </b>\r\n                <div>{profile.fullName}</div>\r\n            </div>\r\n\r\n            <div className={s.editField}>\r\n                <b>Looking for a job: </b>\r\n                <div>{profile.lookingForAJob ? 'yes' : 'no'}</div>\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div className={s.editField}>\r\n                <b>My professional skills: </b>\r\n                <div>{profile.lookingForAJob && profile.lookingForAJobDescription}</div>\r\n            </div>\r\n            }\r\n            <div><b>About me: </b>{profile.aboutMe}</div>\r\n\r\n            <div>\r\n                <b>Contacts: </b> {Object.keys(profile.contacts).map(key => {\r\n                return <Contacts key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n            })}\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileData;","import s from \"./ProfileInfo.module.css\";\r\nimport {FieldCreator, fieldCreator, Input, TextArea} from \"../../common/FormControls/FormControls\";\r\nimport {Field} from \"redux-form\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport { Contacts } from \"./ProfileInfo\";\r\nimport {required} from \"../../../utils/Form-validator\";\r\n\r\n\r\nconst ProfileDataForm = ({profile, handleSubmit, error }: any) => {\r\n\r\n    // console.log(handleSubmit) передает  reduxForm и связывает с тем что мы передали в ProfileDataReduxForm  (onSubmit={profileInfoSubmit} )\r\n    // console.log(rest)\r\n    return (\r\n          <form className={s.profileInfoWrapper} onSubmit={handleSubmit}>\r\n              {\r\n                  error ? <div className={s.commonErrorText}>{error}</div>   // не срабатывает?\r\n                      : ''\r\n              }\r\n            <button>Save</button>\r\n            <div className={s.editField}>\r\n                <b>Full Name: </b>\r\n                {fieldCreator('fullName', Input,undefined, [required], null)}\r\n                {/*можно передать ровно столько аргументов сколько указано*/}\r\n                {/*<FieldCreator name='fullName' component={Input}/>*/}\r\n                {/*//можно передать либо 0 либо сколько угодно.. т.к по дефолту приходит пустой пропс*/}\r\n            </div>\r\n\r\n            <div className={s.editField}>\r\n                <b>Looking for a job: </b>\r\n                <FieldCreator name='lookingForAJob' component={Input} type='checkbox'/>\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div className={s.editField}>\r\n                <b>My professional skills: </b>\r\n                <FieldCreator name='lookingForAJobDescription' component={Input}/>\r\n            </div>\r\n            }\r\n            <div> <b>about Me: </b>\r\n                {fieldCreator('aboutMe', TextArea,undefined,[required], null)}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Contacts: </b> {Object.keys(profile.contacts).map(key => {\r\n                return <Contacts key={key}\r\n                                 contactTitle={key}\r\n                                 contactValue={<Field name={'contacts.' + key} component={Input} type=\"text\"/>}\r\n                />\r\n            })}\r\n\r\n            </div>\r\n        </form >\r\n    )\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm({form: 'profile-info', enableReinitialize: true })(ProfileDataForm)\r\n\r\nexport default ProfileDataReduxForm;","import React, {useEffect, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport avatar from \"../../../assets/images/avatar.png\"\r\nimport ProfileData from \"./ProfileData\";\r\nimport ProfileDataReduxForm from './ProfileDataForm';\r\n\r\nexport const Contacts = ({contactTitle, contactValue}: any) => {\r\n    return <div className={s.contacts}>\r\n        <b>{contactTitle}</b> : {contactValue}\r\n    </div>\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile, profileUpdateStatus, ...props }: any) => {\r\n\r\n    interface Event<T = EventTarget> {\r\n        target: T;\r\n    }\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (profileUpdateStatus === 'success') {\r\n            setEditMode(false);\r\n        }\r\n    })\r\n\r\n    const goToEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const profileInfoSubmit =  (formData: any) => {\r\n        saveProfile(formData)\r\n        // if profileUpdateStatus === success  => setEditMode(false);\r\n\r\n        // saveProfile(formData)\r\n        //     .then(() => {\r\n        //         setEditMode(false);\r\n        //     });\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: Event<HTMLInputElement>) => {\r\n        if (e.target.files!.length) {\r\n            savePhoto(e.target.files![0]);\r\n        }\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    } else {\r\n        return (\r\n            <div>\r\n                <img className={s.avatar} alt=''\r\n                     src={profile && profile.photos.large ? profile.photos.large : avatar}/>\r\n\r\n                <div>{isOwner && <input onChange={onMainPhotoSelected} type='file'/>}</div>\r\n\r\n                <div className={s.wallpaper}>\r\n                    {\r\n                        editMode\r\n                            ? <ProfileDataReduxForm {...props} initialValues={profile} onSubmit={profileInfoSubmit} profile={profile}  />\r\n                            : <ProfileData profile={profile} goToEditMode={goToEditMode} />\r\n                    }\r\n                </div>\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} isOwner={isOwner}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostProps = {\r\n    likesCount: number\r\n    message: string\r\n}\r\n\r\nconst Post = ({likesCount, message}: PostProps) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg'  alt=''/>\r\n        { message }\r\n          <div>\r\n        <span>like</span> { likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {IPost} from '../../../interfaces';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLength, number, required} from \"../../../utils/Form-validator\";\r\nimport {TextArea} from \"../../common/FormControls/FormControls\";\r\n\r\ntype MyPostsProps = {\r\n    posts: Array<IPost> // Array<object>\r\n    addPost(newPostText: any): void\r\n    resetField() : void\r\n}\r\n\r\nconst maxLength15 = maxLength(15);\r\n\r\nconst AddPostForm = (props: any) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            {/*  preventDefault*/}\r\n            {/*Сбор данных */}\r\n            {/*Вызов колбека*/}\r\n            <Field\r\n                name='newPostText'\r\n                component ={TextArea}\r\n                placeholder=\"Ввелите текст поста\"\r\n                validate = {[required, number, maxLength15 ]}\r\n\r\n            />\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostsReduxForm = reduxForm({form: 'postAddMessageForm'})(AddPostForm);\r\n\r\nconst MyPosts = (props: MyPostsProps) =>  {\r\n\r\n    let {posts, addPost, resetField} = props;\r\n    let postsElements = [...posts]\r\n        .reverse()\r\n        .map((p) => <Post key={p.id} {...p}/>)\r\n\r\n    const addNewPost = (values: any) => {\r\n        addPost(values.newPostText);\r\n        resetField();\r\n    }\r\n    return (\r\n        <div className={s.myPostsWrapper}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <AddPostsReduxForm onSubmit={addNewPost}/>\r\n                    {/*// когда форма засабмитится вызовет колбек и мы получим данные их этой формы.*/}\r\n                </div>\r\n\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MyPosts;\r\n","import {addPostAC} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {IState} from \"../../../interfaces\";\r\nimport {connect} from \"react-redux\";\r\nimport {reset} from \"redux-form\";\r\n\r\nlet mapStateToProps = (state: IState) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch: any) => {\r\n\r\n    return {\r\n        addPost: (newPostText: any) => {\r\n            dispatch(addPostAC(newPostText));\r\n        },\r\n\r\n        resetField: () => {\r\n            dispatch(reset('postAddMessageForm'));\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\ninterface IProfile {\r\n    profile : any\r\n    status: string\r\n    updateStatus(status: string): void\r\n    isOwner: any\r\n    savePhoto(file: any): void\r\n    saveProfile(profile: any): void\r\n    profileUpdateStatus: string\r\n}\r\n\r\nconst Profile: React.FunctionComponent<IProfile> = ( props) => {\r\n\r\n    return (\r\n        <>\r\n            <ProfileInfo  isOwner ={props.isOwner}\r\n                          profile = {props.profile}\r\n                          status = {props.status}\r\n                          updateStatus = {props.updateStatus}\r\n                          savePhoto = {props.savePhoto}\r\n                          saveProfile = {props.saveProfile}\r\n                          profileUpdateStatus = {props.profileUpdateStatus}\r\n\r\n            />\r\n            <MyPostsContainer />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, updateStatus, saveProfile} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\n\r\ninterface IProps extends RouteComponentProps<any> {\r\n    getUserProfile(userId: number): void\r\n    updateStatus(status: string): void\r\n    getStatus(userId: number): void\r\n    profile: any\r\n    status: string\r\n    authorizedUserId: number\r\n    isAuth: boolean\r\n    savePhoto(file: any): void\r\n    saveProfile(profile: any): void\r\n    profileUpdateStatus: string\r\n}\r\nclass ProfileContainer extends React.Component<IProps>{\r\n\r\n\r\n    updateProfilePhoto() {\r\n        let userId = this.props.match.params.userId;\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        if (userId) {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getStatus(userId);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateProfilePhoto();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<IProps>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\r\n            this.updateProfilePhoto();\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n                <Profile {...this.props}\r\n                         profile = {this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus = {this.props.updateStatus}\r\n                         isOwner = {!this.props.match.params.userId}\r\n                         savePhoto={this.props.savePhoto}\r\n                         saveProfile = {this.props.saveProfile}\r\n                         profileUpdateStatus = {this.props.profileUpdateStatus}\r\n                />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        profileUpdateStatus: state.profilePage.profileUpdateStatus,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth,\r\n\r\n    }\r\n}\r\n\r\nexport default withAuthRedirect(connect(mapStateToProps,\r\n    {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile})(withRouter(ProfileContainer)));\r\n"],"sourceRoot":""}